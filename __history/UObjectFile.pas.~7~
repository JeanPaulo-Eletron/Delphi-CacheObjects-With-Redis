unit UObjectFile;

interface

uses
  Classes, SysUtils;

type
  TObjectFile = class(TComponent)
  private
    FFileName: String;
  public
    constructor Create(POwner: TComponent); override;
    destructor Destroy; override;
    procedure LoadFromTextFile(const aFileName: TFileName);
    procedure SaveToTextFile(const PFileName: TFileName);
    procedure SaveText;
    function ToString: String; override; virtual;
    procedure FromString(const aTextualRepresentation: String); virtual;
  end;

implementation

{ TObjectFile }

procedure TObjectFile.SaveText;
begin
  if FFileName <> '' then
    SaveToTextFile(FFileName);
end;

procedure TObjectFile.SaveToTextFile(const PFileName: TFileName);
begin
  with TStringList.Create do
    try
      Text := Self.ToString;
      SaveToFile(PFileName);
    finally
      Free;
    end;
end;

constructor TObjectFile.Create(POwner: TComponent);
begin
  inherited;
  FFileName := '';
end;

destructor TObjectFile.Destroy;
begin
  SaveText;

  inherited;
end;

procedure TObjectFile.LoadFromTextFile(const aFileName: TFileName);
begin
  FFileName := aFileName;

  if FileExists(FFileName) then
    with TStringList.Create do
      try
        LoadFromFile(FFileName);
        FromString(Text);
      finally
        Free;
      end;
end;

{$HINTS OFF}
procedure TObjectFile.FromString(const aTextualRepresentation: String);
var
  BinStream: TMemoryStream;
  StrStream: TStringStream;
begin
  StrStream := TStringStream.Create(aTextualRepresentation);
  try
    BinStream := TMemoryStream.Create;
    try
      StrStream.Seek(0, sofrombeginning);
      ObjectTextToBinary(StrStream, BinStream);
      BinStream.Seek(0, sofrombeginning);
      Self := BinStream.ReadComponent(Self) as TObjectFile;
    finally
      BinStream.Free
    end;
  finally
    StrStream.Free;
  end;
end;
{$HINTS ON}

function TObjectFile.ToString: String;
var
  BinStream: TMemoryStream;
  StrStream: TStringStream;
  S: string;
begin
  inherited;
  BinStream := TMemoryStream.Create;
  try
    StrStream := TStringStream.Create(S);
    try
      BinStream.WriteComponent(Self);
      BinStream.Seek(0, sofrombeginning);
      ObjectBinaryToText(BinStream, StrStream);
      StrStream.Seek(0, sofrombeginning);
      Result := StrStream.DataString;
    finally
      StrStream.Free;
    end;
  finally
    BinStream.Free
  end;
end;

end.
